Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
//SULUTION
class Solution {
    public int[] searchRange(int[] nums, int target) {
        // int n=nums.length;
        // int low = 0, high = n - 1;
        // int last = -1;
        // int first = -1;
        // int count  = 0;
        int[] arr = new int[2];
        arr[0] = findFirst(nums , target);
        arr[1] = findLast(nums , target);

     return arr;   
    }
        int findLast(int nums[] , int target)
        {
             int n=nums.length;
             int low = 0, high = n - 1;
             int last = -1;
             int first = -1;


             while( low <= high)
         {
            int mid = (low+high) / 2;
            if(nums[mid]== target)
            {
                last = mid;
                low = mid+1;
            }
            else if( nums[mid] > target)
            {
                high = mid -1;
            }
            else{
                   low = mid +1;
            }
        }
        return last;
        }
    int findFirst(int nums[] , int target)
    {     
             int n=nums.length;
             int low = 0, high = n - 1;
             int last = -1;
             int first = -1;

         while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                first = mid;
                high = mid - 1;
            } else if (nums[mid] < target) {
                low = mid + 1; 
            } else {
                high = mid - 1;
            }
         }
         return first;
    }
}
