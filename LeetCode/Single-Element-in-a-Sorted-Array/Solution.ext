Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

//Solution 1---
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length;
        if(n==1)
        {
            return nums[0];
        }
        for(int i=0 ; i<n;i++)
        {
            if(i==0 && nums[i+1]!=nums[i])
            {
                return nums[i];
            }
            if(i== n-1 && nums[i]!= nums[i-1])
            {
                return nums[i];
            }
            else{
                if(nums[i]!=nums[i+1] && nums[i]!=nums[i-1])
                {
                    return nums[i];
                }
            }
        }
        return -1;
    }
}

solution 2---

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length;
        int left = 1, right = n-2;
        if(n==1) return nums[0];
         if (nums[0] != nums[1]) return nums[0];
         if (nums[n - 1] != nums[n - 2]) return nums[n - 1];
        while(left <= right)
        {
             int mid = (left + right)/2;
           
           if(nums[mid]!=nums[mid+1] && nums[mid]!=nums[mid-1])
           {
               return nums[mid];
           }

           if(mid%2==0 && nums[mid]==nums[mid+1] 
           || mid%2==1 && nums[mid]==nums[mid-1])
           {
                 left = mid+1;
           }
           else{
                right = mid -1 ;
           }
        }
        return -1;
    }
}

solution 3--- Using XOR
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int Ans =0;
        for(int i=0 ; i< nums.length ;i++)
        {
           Ans = Ans ^ nums[i];
  //If We XOR a Number With the Same Another Num twice then the Number will be the Answer
        }
        return Ans;
    }
}

