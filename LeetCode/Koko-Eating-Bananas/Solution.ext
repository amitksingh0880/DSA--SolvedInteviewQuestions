Input: piles = [3,6,7,11], h = 8
Output: 4
//Binary Solution
class Solution {
    int calculateHours(int[] piles, int k) {
        int result = 0;
        int n = piles.length;
        for(int i = 0; i < n; i++) {
            result += Math.ceil((double) piles[i] / k);
        }
        return result;
    }
    
    public int minEatingSpeed(int[] piles, int h) {
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < piles.length; i++) {
            max = Math.max(max, piles[i]);
        }
        
        int left = 1;
        int right = max;
        while (left < right) {
            int mid = left + (right - left) / 2;
            int hours = calculateHours(piles, mid);
            if (hours <= h) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}

//Brute Force
// class Solution {
//     int calculateHours(int[] piles, int k) {
//         int result = 0;
//         int n = piles.length;
//         for(int i = 0; i < n; i++) {
//             result += Math.ceil((double) piles[i] / k);
//         }
//         return result;
//     }
    
//     public int minEatingSpeed(int[] piles, int h) {
//         int maxPile = Integer.MIN_VALUE;
//         for(int pile : piles) {
//             maxPile = Math.max(maxPile, pile);
//         }
        
//         for(int k = 1; k <= maxPile; k++) {
//             int hours = calculateHours(piles, k);
//             if(hours <= h) {
//                 return k;
//             }
//         }
        
//         return -1;
//     }
// }
